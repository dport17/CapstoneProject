# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Body(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, channel_id: str=None, channel_name: str=None, team_domain: str=None, team_id: str=None, post_id: str=None, text: str=None, timestamp: int=None, token: str=None, trigger_word: str=None, user_id: str=None, user_name: str=None, file_ids: str=None):  # noqa: E501
        """Body - a model defined in Swagger

        :param channel_id: The channel_id of this Body.  # noqa: E501
        :type channel_id: str
        :param channel_name: The channel_name of this Body.  # noqa: E501
        :type channel_name: str
        :param team_domain: The team_domain of this Body.  # noqa: E501
        :type team_domain: str
        :param team_id: The team_id of this Body.  # noqa: E501
        :type team_id: str
        :param post_id: The post_id of this Body.  # noqa: E501
        :type post_id: str
        :param text: The text of this Body.  # noqa: E501
        :type text: str
        :param timestamp: The timestamp of this Body.  # noqa: E501
        :type timestamp: int
        :param token: The token of this Body.  # noqa: E501
        :type token: str
        :param trigger_word: The trigger_word of this Body.  # noqa: E501
        :type trigger_word: str
        :param user_id: The user_id of this Body.  # noqa: E501
        :type user_id: str
        :param user_name: The user_name of this Body.  # noqa: E501
        :type user_name: str
        :param file_ids: The file_ids of this Body.  # noqa: E501
        :type file_ids: str
        """
        self.swagger_types = {
            'channel_id': str,
            'channel_name': str,
            'team_domain': str,
            'team_id': str,
            'post_id': str,
            'text': str,
            'timestamp': int,
            'token': str,
            'trigger_word': str,
            'user_id': str,
            'user_name': str,
            'file_ids': str
        }

        self.attribute_map = {
            'channel_id': 'channel_id',
            'channel_name': 'channel_name',
            'team_domain': 'team_domain',
            'team_id': 'team_id',
            'post_id': 'post_id',
            'text': 'text',
            'timestamp': 'timestamp',
            'token': 'token',
            'trigger_word': 'trigger_word',
            'user_id': 'user_id',
            'user_name': 'user_name',
            'file_ids': 'file_ids'
        }
        self._channel_id = channel_id
        self._channel_name = channel_name
        self._team_domain = team_domain
        self._team_id = team_id
        self._post_id = post_id
        self._text = text
        self._timestamp = timestamp
        self._token = token
        self._trigger_word = trigger_word
        self._user_id = user_id
        self._user_name = user_name
        self._file_ids = file_ids

    @classmethod
    def from_dict(cls, dikt) -> 'Body':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The body of this Body.  # noqa: E501
        :rtype: Body
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_id(self) -> str:
        """Gets the channel_id of this Body.


        :return: The channel_id of this Body.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id: str):
        """Sets the channel_id of this Body.


        :param channel_id: The channel_id of this Body.
        :type channel_id: str
        """

        self._channel_id = channel_id

    @property
    def channel_name(self) -> str:
        """Gets the channel_name of this Body.


        :return: The channel_name of this Body.
        :rtype: str
        """
        return self._channel_name

    @channel_name.setter
    def channel_name(self, channel_name: str):
        """Sets the channel_name of this Body.


        :param channel_name: The channel_name of this Body.
        :type channel_name: str
        """

        self._channel_name = channel_name

    @property
    def team_domain(self) -> str:
        """Gets the team_domain of this Body.


        :return: The team_domain of this Body.
        :rtype: str
        """
        return self._team_domain

    @team_domain.setter
    def team_domain(self, team_domain: str):
        """Sets the team_domain of this Body.


        :param team_domain: The team_domain of this Body.
        :type team_domain: str
        """

        self._team_domain = team_domain

    @property
    def team_id(self) -> str:
        """Gets the team_id of this Body.


        :return: The team_id of this Body.
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id: str):
        """Sets the team_id of this Body.


        :param team_id: The team_id of this Body.
        :type team_id: str
        """

        self._team_id = team_id

    @property
    def post_id(self) -> str:
        """Gets the post_id of this Body.


        :return: The post_id of this Body.
        :rtype: str
        """
        return self._post_id

    @post_id.setter
    def post_id(self, post_id: str):
        """Sets the post_id of this Body.


        :param post_id: The post_id of this Body.
        :type post_id: str
        """

        self._post_id = post_id

    @property
    def text(self) -> str:
        """Gets the text of this Body.


        :return: The text of this Body.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text: str):
        """Sets the text of this Body.


        :param text: The text of this Body.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def timestamp(self) -> int:
        """Gets the timestamp of this Body.


        :return: The timestamp of this Body.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: int):
        """Sets the timestamp of this Body.


        :param timestamp: The timestamp of this Body.
        :type timestamp: int
        """

        self._timestamp = timestamp

    @property
    def token(self) -> str:
        """Gets the token of this Body.


        :return: The token of this Body.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token: str):
        """Sets the token of this Body.


        :param token: The token of this Body.
        :type token: str
        """

        self._token = token

    @property
    def trigger_word(self) -> str:
        """Gets the trigger_word of this Body.


        :return: The trigger_word of this Body.
        :rtype: str
        """
        return self._trigger_word

    @trigger_word.setter
    def trigger_word(self, trigger_word: str):
        """Sets the trigger_word of this Body.


        :param trigger_word: The trigger_word of this Body.
        :type trigger_word: str
        """

        self._trigger_word = trigger_word

    @property
    def user_id(self) -> str:
        """Gets the user_id of this Body.


        :return: The user_id of this Body.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this Body.


        :param user_id: The user_id of this Body.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def user_name(self) -> str:
        """Gets the user_name of this Body.


        :return: The user_name of this Body.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name: str):
        """Sets the user_name of this Body.


        :param user_name: The user_name of this Body.
        :type user_name: str
        """

        self._user_name = user_name

    @property
    def file_ids(self) -> str:
        """Gets the file_ids of this Body.


        :return: The file_ids of this Body.
        :rtype: str
        """
        return self._file_ids

    @file_ids.setter
    def file_ids(self, file_ids: str):
        """Sets the file_ids of this Body.


        :param file_ids: The file_ids of this Body.
        :type file_ids: str
        """

        self._file_ids = file_ids
